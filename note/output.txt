// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: velocity_min_max_residual
 *
 * Args:
 *     t: Scalar
 *     v_0: Scalar
 *     a_0: Scalar
 *     v_A: Scalar
 *     a_A: Scalar
 *     T_A: Scalar
 *     l_A: Scalar
 *     s_5: Scalar
 *     s_6: Scalar
 *     s_7: Scalar
 *     s_8: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     jacobian: (1x4) jacobian of res wrt args s_5 (1), s_6 (1), s_7 (1), s_8 (1)
 *     hessian: (4x4) Gauss-Newton hessian for args s_5 (1), s_6 (1), s_7 (1), s_8 (1)
 *     rhs: (4x1) Gauss-Newton rhs for args s_5 (1), s_6 (1), s_7 (1), s_8 (1)
 */
template <typename Scalar>
void VelocityMinMaxFactor(const Scalar t, const Scalar v_0, const Scalar a_0, const Scalar v_A,
                          const Scalar a_A, const Scalar T_A, const Scalar l_A, const Scalar s_5,
                          const Scalar s_6, const Scalar s_7, const Scalar s_8,
                          Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                          Eigen::Matrix<Scalar, 1, 4>* const jacobian = nullptr,
                          Eigen::Matrix<Scalar, 4, 4>* const hessian = nullptr,
                          Eigen::Matrix<Scalar, 4, 1>* const rhs = nullptr) {
  // Total ops: 184

  // Input arrays

  // Intermediate terms (36)
  const Scalar _tmp0 = (Scalar(1) / Scalar(2)) * v_0;
  const Scalar _tmp1 = std::pow(t, Scalar(5));
  const Scalar _tmp2 = std::pow(t, Scalar(6));
  const Scalar _tmp3 = std::pow(t, Scalar(7));
  const Scalar _tmp4 = std::pow(t, Scalar(8));
  const Scalar _tmp5 = std::pow(T_A, Scalar(5));
  const Scalar _tmp6 = std::pow(t, Scalar(4));
  const Scalar _tmp7 = -2520 * l_A;
  const Scalar _tmp8 = T_A * v_0;
  const Scalar _tmp9 = T_A * v_A;
  const Scalar _tmp10 = std::pow(T_A, Scalar(2));
  const Scalar _tmp11 = _tmp10 * a_0;
  const Scalar _tmp12 = std::pow(T_A, Scalar(6));
  const Scalar _tmp13 = _tmp12 * s_5;
  const Scalar _tmp14 = std::pow(T_A, Scalar(7)) * s_6;
  const Scalar _tmp15 = std::pow(T_A, Scalar(8)) * s_7;
  const Scalar _tmp16 = std::pow(T_A, Scalar(9)) * s_8;
  const Scalar _tmp17 = std::pow(T_A, Scalar(4));
  const Scalar _tmp18 = [&]() {
    const Scalar base = t;
    return base * base * base;
  }();
  const Scalar _tmp19 = [&]() {
    const Scalar base = T_A;
    return base * base * base;
  }();
  const Scalar _tmp20 = std::pow(t, Scalar(2));
  const Scalar _tmp21 = _tmp0 + _tmp1 * s_5 + _tmp2 * s_6 + _tmp3 * s_7 + _tmp4 * s_8 + a_0 * t +
                        (Scalar(1) / Scalar(84)) * _tmp6 *
                            (210 * _tmp10 * a_A - 210 * _tmp11 - 210 * _tmp13 - 360 * _tmp14 -
                             525 * _tmp15 - 700 * _tmp16 - _tmp7 - 1260 * _tmp8 - 1260 * _tmp9) /
                            _tmp5 +
                        (Scalar(1) / Scalar(84)) * _tmp20 *
                            (126 * _tmp10 * a_A - 378 * _tmp11 - 42 * _tmp13 - 108 * _tmp14 -
                             189 * _tmp15 - 280 * _tmp16 - _tmp7 - 1512 * _tmp8 - 1008 * _tmp9) /
                            _tmp19 +
                        (Scalar(1) / Scalar(42)) * _tmp18 *
                            (-168 * _tmp10 * a_A + 252 * _tmp11 + 84 * _tmp13 + 192 * _tmp14 +
                             315 * _tmp15 + 448 * _tmp16 + _tmp7 + 1344 * _tmp8 + 1176 * _tmp9) /
                            _tmp17;
  const Scalar _tmp22 = -_tmp0 + std::fabs(_tmp21) + Scalar(0.10000000000000001);
  const Scalar _tmp23 = std::max<Scalar>(0, _tmp22);
  const Scalar _tmp24 = -Scalar(5) / Scalar(2) * T_A * _tmp6 + _tmp1 + 2 * _tmp10 * _tmp18 -
                        Scalar(1) / Scalar(2) * _tmp19 * _tmp20;
  const Scalar _tmp25 = Scalar(0.5) * ((((_tmp22) >= 0) - ((_tmp22) < 0)) + 1);
  const Scalar _tmp26 = (((_tmp21) > 0) - ((_tmp21) < 0));
  const Scalar _tmp27 = _tmp25 * _tmp26;
  const Scalar _tmp28 = Scalar(1000.0) * _tmp27;
  const Scalar _tmp29 = -Scalar(30) / Scalar(7) * _tmp10 * _tmp6 -
                        Scalar(9) / Scalar(7) * _tmp17 * _tmp20 +
                        (Scalar(32) / Scalar(7)) * _tmp18 * _tmp19 + _tmp2;
  const Scalar _tmp30 = (Scalar(15) / Scalar(2)) * _tmp17 * _tmp18 -
                        Scalar(25) / Scalar(4) * _tmp19 * _tmp6 -
                        Scalar(9) / Scalar(4) * _tmp20 * _tmp5 + _tmp3;
  const Scalar _tmp31 = -Scalar(10) / Scalar(3) * _tmp12 * _tmp20 -
                        Scalar(25) / Scalar(3) * _tmp17 * _tmp6 +
                        (Scalar(32) / Scalar(3)) * _tmp18 * _tmp5 + _tmp4;
  const Scalar _tmp32 =
      Scalar(1000000.0) * std::pow(_tmp25, Scalar(2)) * std::pow(_tmp26, Scalar(2));
  const Scalar _tmp33 = _tmp24 * _tmp32;
  const Scalar _tmp34 = _tmp29 * _tmp32;
  const Scalar _tmp35 = Scalar(1000000.0) * _tmp23 * _tmp27;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = Scalar(1000.0) * _tmp23;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 4>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp24 * _tmp28;
    _jacobian(0, 1) = _tmp28 * _tmp29;
    _jacobian(0, 2) = _tmp28 * _tmp30;
    _jacobian(0, 3) = _tmp28 * _tmp31;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 4, 4>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp24, Scalar(2)) * _tmp32;
    _hessian(1, 0) = _tmp29 * _tmp33;
    _hessian(2, 0) = _tmp30 * _tmp33;
    _hessian(3, 0) = _tmp31 * _tmp33;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp29, Scalar(2)) * _tmp32;
    _hessian(2, 1) = _tmp30 * _tmp34;
    _hessian(3, 1) = _tmp31 * _tmp34;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp30, Scalar(2)) * _tmp32;
    _hessian(3, 2) = _tmp30 * _tmp31 * _tmp32;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp31, Scalar(2)) * _tmp32;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 4, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp24 * _tmp35;
    _rhs(1, 0) = _tmp29 * _tmp35;
    _rhs(2, 0) = _tmp30 * _tmp35;
    _rhs(3, 0) = _tmp31 * _tmp35;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
